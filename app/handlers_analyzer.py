import os
import tempfile
import speech_recognition as sr
from aiogram import Router, F
from aiogram.types import Message
from pydub import AudioSegment
from pydub.silence import split_on_silence
from generate import ai_analyze_message, analyze_long_text, simple_text_analysis
import logging
import subprocess
import hashlib
import time
from collections import defaultdict

router = Router()
logger = logging.getLogger(__name__)

# –ö—ç—à –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
text_cache = {}
user_requests = defaultdict(list)
last_ai_error = defaultdict(float)

def parse_analysis_response(response: str) -> dict:
    lines = response.split('\n')
    main_idea = ""
    answer = ""
    
    for line in lines:
        line = line.strip()
        if line.startswith('–û–°–ù–û–í–ù–ê–Ø –ú–´–°–õ–¨:'):
            main_idea = line.replace('–û–°–ù–û–í–ù–ê–Ø –ú–´–°–õ–¨:', '').strip()
        elif line.startswith('–û–¢–í–ï–¢:'):
            answer = line.replace('–û–¢–í–ï–¢:', '').strip()
    
    if not main_idea and not answer:
        parts = response.split('\n\n')
        if len(parts) >= 2:
            main_idea = parts[0]
            answer = parts[1]
        else:
            main_idea = response
            answer = "–ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã."
    
    return {"main_idea": main_idea, "answer": answer}

def can_make_ai_request(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∫ AI"""
    now = time.time()
    
    user_requests[user_id] = [req_time for req_time in user_requests[user_id] if now - req_time < 120]
    if len(user_requests[user_id]) >= 3:
        return False
    
    if now - last_ai_error.get(user_id, 0) < 300:
        return False
    
    return True

def add_request(user_id: int):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_requests[user_id].append(time.time())

def mark_ai_error(user_id: int):
    """–û—Ç–º–µ—á–∞–µ—Ç –æ—à–∏–±–∫—É AI –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    last_ai_error[user_id] = time.time()

def split_audio_on_silence(audio_path, silence_thresh=-40, min_silence_len=1000, chunk_length=30000):
    """
    –†–∞–∑–±–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç—ã –ø–æ —Ç–∏—à–∏–Ω–µ –∏–ª–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    """
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ
        audio = AudioSegment.from_wav(audio_path)
        duration = len(audio)
        
        # –ï—Å–ª–∏ –∞—É–¥–∏–æ –∫–æ—Ä–æ—Ç–∫–æ–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        if duration <= 45000:  # 45 —Å–µ–∫—É–Ω–¥
            return [audio]
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–±–∏—Ç—å –ø–æ —Ç–∏—à–∏–Ω–µ
        chunks = split_on_silence(
            audio,
            min_silence_len=min_silence_len,
            silence_thresh=silence_thresh,
            keep_silence=500  # –û—Å—Ç–∞–≤–ª—è–µ–º –Ω–µ–º–Ω–æ–≥–æ —Ç–∏—à–∏–Ω—ã –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
        )
        
        # –ï—Å–ª–∏ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –ø–æ —Ç–∏—à–∏–Ω–µ –Ω–µ –¥–∞–ª–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ/–º–∞–ª–æ —á–∞–Ω–∫–æ–≤,
        # —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
        if not chunks or len(chunks) > 20 or len(chunks) < 2:
            chunks = []
            for i in range(0, duration, chunk_length):
                chunk = audio[i:i + chunk_length]
                if len(chunk) > 1000:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —á–∞–Ω–∫–∞ 1 —Å–µ–∫—É–Ω–¥–∞
                    chunks.append(chunk)
        
        logger.info(f"–ê—É–¥–∏–æ —Ä–∞–∑–±–∏—Ç–æ –Ω–∞ {len(chunks)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤, –æ–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}–º—Å")
        return chunks
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∏–µ–Ω–∏–∏ –∞—É–¥–∏–æ: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Å—å —Ñ–∞–π–ª –∫–∞–∫ –æ–¥–∏–Ω —á–∞–Ω–∫
        return [AudioSegment.from_wav(audio_path)]

async def recognize_long_audio(wav_filename):
    """–†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã, —Ä–∞–∑–±–∏–≤–∞—è –∏—Ö –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç—ã"""
    recognizer = sr.Recognizer()
    full_text = ""
    
    try:
        # –†–∞–∑–±–∏–≤–∞–µ–º –∞—É–¥–∏–æ –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç—ã
        chunks = split_audio_on_silence(wav_filename)
        
        if len(chunks) > 1:
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {len(chunks)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –∞—É–¥–∏–æ")
        
        for i, chunk in enumerate(chunks):
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞
            with tempfile.NamedTemporaryFile(delete=False, suffix=f'_segment_{i}.wav') as segment_file:
                segment_filename = segment_file.name
            
            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ–≥–º–µ–Ω—Ç
            chunk.export(segment_filename, format="wav")
            
            try:
                # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç
                with sr.AudioFile(segment_filename) as source:
                    recognizer.adjust_for_ambient_noise(source, duration=0.5)
                    audio_data = recognizer.record(source)
                    segment_text = recognizer.recognize_google(audio_data, language='ru-RU')
                    
                    if segment_text:
                        full_text += segment_text + " "
                        logger.info(f"–°–µ–≥–º–µ–Ω—Ç {i+1}/{len(chunks)} —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω: {segment_text[:50]}...")
                    else:
                        logger.warning(f"–°–µ–≥–º–µ–Ω—Ç {i+1} –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω")
                        
            except sr.UnknownValueError:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å–µ–≥–º–µ–Ω—Ç {i+1}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —Å–µ–≥–º–µ–Ω—Ç–∞ {i+1}: {e}")
            finally:
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–µ–≥–º–µ–Ω—Ç–∞
                if os.path.exists(segment_filename):
                    os.unlink(segment_filename)
        
        return full_text.strip()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ –¥–ª–∏–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ: {e}")
        # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –∞—É–¥–∏–æ
        try:
            with sr.AudioFile(wav_filename) as source:
                recognizer.adjust_for_ambient_noise(source, duration=0.5)
                audio_data = recognizer.record(source)
                return recognizer.recognize_google(audio_data, language='ru-RU')
        except:
            return ""

@router.message(F.voice)
async def handle_voice_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª–∏–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π"""
    user_id = message.from_user.id
    
    if not can_make_ai_request(user_id):
        await message.answer("‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 2-3 –º–∏–Ω—É—Ç—ã.")
        return
    
    add_request(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    voice_duration = message.voice.duration
    if voice_duration > 120:  # –ï—Å–ª–∏ –±–æ–ª—å—à–µ 2 –º–∏–Ω—É—Ç
        await message.answer(f"üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–ª–∏–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ({voice_duration} —Å–µ–∫)... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.")
    else:
        await message.answer("üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
    
    ogg_filename = None
    wav_filename = None
    
    try:
        voice = message.voice
        file = await message.bot.get_file(voice.file_id)
        file_path = file.file_path
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        with tempfile.NamedTemporaryFile(delete=False, suffix='.ogg') as ogg_file:
            ogg_filename = ogg_file.name
        
        with tempfile.NamedTemporaryFile(delete=False, suffix='.wav') as wav_file:
            wav_filename = wav_file.name
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        await message.bot.download_file(file_path, ogg_filename)
        
        if not os.path.exists(ogg_filename) or os.path.getsize(ogg_filename) == 0:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º OGG –≤ WAV
        ffmpeg_path = "C:\\ffmpeg\\ffmpeg-master-latest-win64-gpl-shared\\bin\\ffmpeg.exe"
        
        if not os.path.exists(ffmpeg_path):
            await message.answer("‚ùå FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        try:
            result = subprocess.run([
                ffmpeg_path,
                '-i', ogg_filename,
                '-acodec', 'pcm_s16le',
                '-ac', '1',
                '-ar', '16000',
                '-af', 'volume=1.5,highpass=f=200,lowpass=f=3000',  # –£–ª—É—á—à–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
                wav_filename,
                '-y'
            ], capture_output=True, text=True, timeout=60)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            
            if result.returncode != 0:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ")
                return
                
        except subprocess.TimeoutExpired:
            await message.answer("‚ùå –¢–∞–π–º–∞—É—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ WAV —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω
        if not os.path.exists(wav_filename) or os.path.getsize(wav_filename) == 0:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ")
            return
        
        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º –∞—É–¥–∏–æ (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª–∏–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π)
        text = await recognize_long_audio(wav_filename)
        
        if not text or len(text.strip()) < 10:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
            return
        
        text_length = len(text)
        await message.answer(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç ({text_length} —Å–∏–º–≤–æ–ª–æ–≤):\n{text}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        text_hash = hashlib.md5(text.encode()).hexdigest()
        if text_hash in text_cache:
            analysis = text_cache[text_hash]
            await message.answer("‚ôªÔ∏è –ò—Å–ø–æ–ª—å–∑—É—é –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
        else:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            try:
                # –í—ã–±–∏—Ä–∞–µ–º –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞
                if text_length > 4000:
                    await message.answer("üìñ –¢–µ–∫—Å—Ç –¥–ª–∏–Ω–Ω—ã–π, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–æ —á–∞—Å—Ç—è–º...")
                    analysis_response = await analyze_long_text(text)
                else:
                    analysis_response = await ai_analyze_message(text)
                
                analysis = parse_analysis_response(analysis_response)
                text_cache[text_hash] = analysis
                
                # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∫—ç—à–∞
                if len(text_cache) > 50:
                    oldest_key = next(iter(text_cache))
                    text_cache.pop(oldest_key)
                    
            except Exception as e:
                logger.error(f"AI –∞–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è: {e}")
                mark_ai_error(user_id)
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                backup_response = await simple_text_analysis(text)
                analysis = parse_analysis_response(backup_response)
                await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é –ª–æ–∫–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (AI –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)")
        
        response_text = f"""
üéØ **–û—Å–Ω–æ–≤–Ω–∞—è –º—ã—Å–ª—å:**
{analysis['main_idea']}

üí¨ **–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç:**
{analysis['answer']}
        """
        
        await message.answer(response_text)
        
    except sr.RequestError as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏.")
        logger.error(f"Speech recognition error: {e}")
    except Exception as e:
        error_msg = str(e)
        logger.error(f"Voice processing error: {e}")
        
        if "429" in error_msg or "rate" in error_msg.lower():
            mark_ai_error(user_id)
            await message.answer("‚ùå –õ–∏–º–∏—Ç—ã AI –∏—Å—á–µ—Ä–ø–∞–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 5-10 –º–∏–Ω—É—Ç.")
        elif "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç" in error_msg:
            mark_ai_error(user_id)
            await message.answer("‚ùå –°–µ—Ä–≤–∏—Å AI –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é –ª–æ–∫–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑.")
            try:
                backup_response = await simple_text_analysis(text)
                analysis = parse_analysis_response(backup_response)
                response_text = f"""
üéØ **–û—Å–Ω–æ–≤–Ω–∞—è –º—ã—Å–ª—å:**
{analysis['main_idea']}

üí¨ **–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç:**
{analysis['answer']}
                """
                await message.answer(response_text)
            except:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {error_msg}")
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        for filename in [ogg_filename, wav_filename]:
            if filename and os.path.exists(filename):
                try:
                    os.unlink(filename)
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {filename}: {e}")

@router.message(F.text & ~F.command)
async def handle_text_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª–∏–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤"""
    user_id = message.from_user.id
    text = message.text
    
    if not can_make_ai_request(user_id):
        await message.answer("‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 2-3 –º–∏–Ω—É—Ç—ã.")
        return
    
    add_request(user_id)
    
    if len(text) < 15:
        await message.answer("üìù –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    text_length = len(text)
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–ª–∏–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
    if text_length > 4000:
        await message.answer(f"üìñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç ({text_length} —Å–∏–º–≤–æ–ª–æ–≤)... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.")
    else:
        await message.answer("ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–∫—Å—Ç...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        text_hash = hashlib.md5(text.encode()).hexdigest()
        if text_hash in text_cache:
            analysis = text_cache[text_hash]
            await message.answer("‚ôªÔ∏è –ò—Å–ø–æ–ª—å–∑—É—é –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
        else:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            try:
                # –í—ã–±–∏—Ä–∞–µ–º –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞
                if text_length > 4000:
                    analysis_response = await analyze_long_text(text)
                else:
                    analysis_response = await ai_analyze_message(text)
                
                analysis = parse_analysis_response(analysis_response)
                text_cache[text_hash] = analysis
            except Exception as e:
                logger.error(f"AI –∞–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è: {e}")
                mark_ai_error(user_id)
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                backup_response = await simple_text_analysis(text)
                analysis = parse_analysis_response(backup_response)
                await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é –ª–æ–∫–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (AI –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)")
        
        response_text = f"""
üéØ **–û—Å–Ω–æ–≤–Ω–∞—è –º—ã—Å–ª—å:**
{analysis['main_idea']}

üí¨ **–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç:**
{analysis['answer']}
        """
        
        await message.answer(response_text)
        
    except Exception as e:
        error_msg = str(e)
        logger.error(f"Text processing error: {e}")
        
        if "429" in error_msg or "rate" in error_msg.lower():
            mark_ai_error(user_id)
            await message.answer("‚ùå –õ–∏–º–∏—Ç—ã AI –∏—Å—á–µ—Ä–ø–∞–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 5-10 –º–∏–Ω—É—Ç.")
        elif "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç" in error_msg:
            mark_ai_error(user_id)
            await message.answer("‚ùå –°–µ—Ä–≤–∏—Å AI –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {error_msg}")

@router.message(F.command("start"))
async def start_command(message: Message):
    welcome_text = """
ü§ñ **–ë–æ—Ç-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π**

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ:
‚Ä¢ üìù –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–ª—é–±–æ–π –¥–ª–∏–Ω—ã)
‚Ä¢ üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–ª—é–±–æ–π –¥–ª–∏–Ω—ã)

–Ø –≤—ã–¥–µ–ª—é –æ—Å–Ω–æ–≤–Ω—É—é –º—ã—Å–ª—å –∏ –ø—Ä–µ–¥–ª–æ–∂—É –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç!

‚ú® **–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:**
- –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç—ã –ª—é–±–æ–π –¥–ª–∏–Ω—ã
- –†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∏ –≤—ã–¥–µ–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ
- –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏

‚ö†Ô∏è *–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö AI-–º–æ–¥–µ–ª–µ–π:*
- –ú–∞–∫—Å–∏–º—É–º 3 –∑–∞–ø—Ä–æ—Å–∞ –≤ 2 –º–∏–Ω—É—Ç—ã
- –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö AI –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫—ç—à–∏—Ä—É—é—Ç—Å—è –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ª–∏–º–∏—Ç–æ–≤

üí° *–°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:*
- –ì–æ–≤–æ—Ä–∏—Ç–µ —á–µ—Ç–∫–æ –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ
- –î–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤ - –±–æ—Ç —Ä–∞–∑–±–µ—Ä–µ—Ç—Å—è —Å–∞–º!
    """
    await message.answer(welcome_text)

@router.message(F.command("status"))
async def status_command(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ª–∏–º–∏—Ç–æ–≤"""
    user_id = message.from_user.id
    now = time.time()
    
    # –°—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–æ–≤
    recent_requests = [req_time for req_time in user_requests[user_id] if now - req_time < 120]
    remaining_requests = max(0, 3 - len(recent_requests))
    
    # –°—Ç–∞—Ç—É—Å AI
    ai_blocked = now - last_ai_error.get(user_id, 0) < 300
    ai_status = "üî¥ –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω" if ai_blocked else "üü¢ –î–æ—Å—Ç—É–ø–µ–Ω"
    
    status_text = f"""
üìä **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:**

üîÑ –ó–∞–ø—Ä–æ—Å—ã: {len(recent_requests)}/3 (–æ—Å—Ç–∞–ª–æ—Å—å: {remaining_requests})
ü§ñ AI: {ai_status}
üíæ –ö—ç—à: {len(text_cache)} –∑–∞–ø–∏—Å–µ–π

{"‚è≥ AI –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ " + str(int(300 - (now - last_ai_error[user_id]))) + " —Å–µ–∫" if ai_blocked else "‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç"}
    """
    await message.answer(status_text)

@router.message(F.command("clear_cache"))
async def clear_cache_command(message: Message):
    """–û—á–∏—â–∞–µ—Ç –∫—ç—à"""
    text_cache.clear()
    await message.answer("‚úÖ –ö—ç—à –æ—á–∏—â–µ–Ω")

@router.message(F.command("reset_limits"))
async def reset_limits_command(message: Message):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ª–∏–º–∏—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
    user_id = message.from_user.id
    user_requests[user_id] = []
    last_ai_error[user_id] = 0
    await message.answer("‚úÖ –õ–∏–º–∏—Ç—ã —Å–±—Ä–æ—à–µ–Ω—ã")

@router.message(F.command("help"))
async def help_command(message: Message):
    """–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞"""
    help_text = """
üìã **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:**

üí¨ *–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:*
- –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ª—é–±–æ–π –¥–ª–∏–Ω—ã
- –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –µ–≥–æ –∏ –¥–∞—Å—Ç –æ—Ç–≤–µ—Ç
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã (—Ä–∞–∑–±–∏–≤–∞—é—Ç—Å—è –Ω–∞ —á–∞—Å—Ç–∏)

üé§ *–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:*
- –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ª—é–±–æ–π –¥–ª–∏–Ω—ã
- –ë–æ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ä–µ—á—å –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
- –î–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –≥–æ–≤–æ—Ä–∏—Ç–µ —á–µ—Ç–∫–æ

‚ö° *–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:*
- –ú–∞–∫—Å–∏–º—É–º 3 –∑–∞–ø—Ä–æ—Å–∞ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
- –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö AI –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
- –î–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ª–∏–º–∏—Ç–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫—ç—à–∏—Ä—É—é—Ç—Å—è

üõ† *–ö–æ–º–∞–Ω–¥—ã:*
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã  
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/clear_cache - –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à
    """
    await message.answer(help_text)
    
def parse_analysis_response(response: str) -> dict:
    """–ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç –æ—Ç AI –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é –º—ã—Å–ª—å –∏ –æ—Ç–≤–µ—Ç —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
    if not response:
        return {
            "main_idea": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", 
            "answer": "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑"
        }
    
    # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç
    response = response.strip()
    
    # –°–ª—É—á–∞–π 1: –ò—â–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º
    lines = response.split('\n')
    main_idea = ""
    answer = ""
    
    for line in lines:
        line = line.strip()
        if line.startswith('–û–°–ù–û–í–ù–ê–Ø –ú–´–°–õ–¨:'):
            main_idea = line.replace('–û–°–ù–û–í–ù–ê–Ø –ú–´–°–õ–¨:', '').strip()
        elif line.startswith('–û–¢–í–ï–¢:'):
            answer = line.replace('–û–¢–í–ï–¢:', '').strip()
    
    # –°–ª—É—á–∞–π 2: –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –æ–±–∞ –ø–æ–ª—è, –Ω–æ –æ–Ω–∏ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–û–°–ù–û–í–ù–ê–Ø –ú–´–°–õ–¨: ... –û–¢–í–ï–¢: ...")
    if not answer and '–û–¢–í–ï–¢:' in response:
        parts = response.split('–û–¢–í–ï–¢:')
        if len(parts) == 2:
            # –ò–∑ –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –º—ã—Å–ª—å
            main_part = parts[0]
            if '–û–°–ù–û–í–ù–ê–Ø –ú–´–°–õ–¨:' in main_part:
                main_idea = main_part.split('–û–°–ù–û–í–ù–ê–Ø –ú–´–°–õ–¨:')[1].strip()
            else:
                main_idea = main_part.strip()
            answer = parts[1].strip()
    
    # –°–ª—É—á–∞–π 3: –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞—à–ª–∏, –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ –¥—Ä—É–≥–∏–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º
    if not main_idea and not answer:
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ –¥–≤–æ–π–Ω–æ–º—É –ø–µ—Ä–µ–Ω–æ—Å—É —Å—Ç—Ä–æ–∫–∏
        parts = response.split('\n\n')
        if len(parts) >= 2:
            main_idea = parts[0]
            answer = parts[1]
        else:
            # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ —Ç–æ—á–∫–∞–º
            sentences = [s.strip() for s in response.split('.') if s.strip()]
            if len(sentences) >= 2:
                main_idea = '. '.join(sentences[:min(2, len(sentences))]) + '.'
                remaining = sentences[min(2, len(sentences)):]
                if remaining:
                    answer = '. '.join(remaining[:min(3, len(remaining))]) + '.'
                else:
                    answer = "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –±–æ–ª—å—à–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π."
            else:
                main_idea = response
                answer = "–ü–æ–Ω–∏–º–∞—é –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é. –î–∞–≤–∞–π—Ç–µ –æ–±—Å—É–¥–∏–º —ç—Ç–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ."
    
    # –û—á–∏—â–∞–µ–º –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–µ-—Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    import re
    main_idea = re.sub(r'[^\u0400-\u04FF\s\.\,\!\?\-\:\(\)\d]', '', main_idea)
    answer = re.sub(r'[^\u0400-\u04FF\s\.\,\!\?\-\:\(\)\d]', '', answer)
    
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    main_idea = re.sub(r'\s+', ' ', main_idea).strip()
    answer = re.sub(r'\s+', ' ', answer).strip()
    
    # –£–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ –º–µ—Ç–æ–∫
    for label in ['–û–°–ù–û–í–ù–ê–Ø –ú–´–°–õ–¨:', '–û–¢–í–ï–¢:']:
        main_idea = main_idea.replace(label, '').strip()
        answer = answer.replace(label, '').strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—è –Ω–µ –ø—É—Å—Ç—ã–µ
    if not main_idea:
        main_idea = "–û—Å–Ω–æ–≤–Ω–∞—è –º—ã—Å–ª—å –Ω–µ –≤—ã–¥–µ–ª–µ–Ω–∞"
    if not answer:
        answer = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç"
    
    # –û–±—Ä–µ–∑–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    if len(main_idea) > 500:
        main_idea = main_idea[:497] + "..."
    if len(answer) > 500:
        answer = answer[:497] + "..."
    
    return {"main_idea": main_idea, "answer": answer}


@router.message(F.voice)
async def handle_voice_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª–∏–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π"""
    user_id = message.from_user.id
    
    if not can_make_ai_request(user_id):
        await message.answer("‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 2-3 –º–∏–Ω—É—Ç—ã.")
        return
    
    add_request(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    voice_duration = message.voice.duration
    if voice_duration > 120:
        await message.answer(f"üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–ª–∏–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ({voice_duration} —Å–µ–∫)... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.")
    else:
        await message.answer("üé§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
    
    ogg_filename = None
    wav_filename = None
    
    try:
        voice = message.voice
        file = await message.bot.get_file(voice.file_id)
        file_path = file.file_path
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        with tempfile.NamedTemporaryFile(delete=False, suffix='.ogg') as ogg_file:
            ogg_filename = ogg_file.name
        
        with tempfile.NamedTemporaryFile(delete=False, suffix='.wav') as wav_file:
            wav_filename = wav_file.name
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        await message.bot.download_file(file_path, ogg_filename)
        
        if not os.path.exists(ogg_filename) or os.path.getsize(ogg_filename) == 0:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º OGG –≤ WAV
        ffmpeg_path = "C:\\ffmpeg\\ffmpeg-master-latest-win64-gpl-shared\\bin\\ffmpeg.exe"
        
        if not os.path.exists(ffmpeg_path):
            await message.answer("‚ùå FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        try:
            result = subprocess.run([
                ffmpeg_path,
                '-i', ogg_filename,
                '-acodec', 'pcm_s16le',
                '-ac', '1',
                '-ar', '16000',
                '-af', 'volume=1.5,highpass=f=200,lowpass=f=3000',
                wav_filename,
                '-y'
            ], capture_output=True, text=True, timeout=60)
            
            if result.returncode != 0:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ")
                return
                
        except subprocess.TimeoutExpired:
            await message.answer("‚ùå –¢–∞–π–º–∞—É—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—É–¥–∏–æ")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ WAV —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω
        if not os.path.exists(wav_filename) or os.path.getsize(wav_filename) == 0:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ")
            return
        
        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º –∞—É–¥–∏–æ
        text = await recognize_long_audio(wav_filename)
        
        if not text or len(text.strip()) < 10:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
            return
        
        text_length = len(text)
        await message.answer(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç ({text_length} —Å–∏–º–≤–æ–ª–æ–≤):\n{text}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        text_hash = hashlib.md5(text.encode()).hexdigest()
        if text_hash in text_cache:
            analysis = text_cache[text_hash]
            await message.answer("‚ôªÔ∏è –ò—Å–ø–æ–ª—å–∑—É—é –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
        else:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å AI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            try:
                # –í—ã–±–∏—Ä–∞–µ–º –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞
                if text_length > 4000:
                    await message.answer("üìñ –¢–µ–∫—Å—Ç –¥–ª–∏–Ω–Ω—ã–π, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–æ —á–∞—Å—Ç—è–º...")
                    analysis_response = await analyze_long_text(text)
                else:
                    analysis_response = await ai_analyze_message(text)
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –æ—Ç AI –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                logger.info(f"–°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –æ—Ç AI: {analysis_response}")
                
                analysis = parse_analysis_response(analysis_response)
                text_cache[text_hash] = analysis
                
                # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∫—ç—à–∞
                if len(text_cache) > 50:
                    oldest_key = next(iter(text_cache))
                    text_cache.pop(oldest_key)
                    
            except Exception as e:
                logger.error(f"AI –∞–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è: {e}")
                mark_ai_error(user_id)
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑
                backup_response = await simple_text_analysis(text)
                analysis = parse_analysis_response(backup_response)
                await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é –ª–æ–∫–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (AI –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)")
        
        response_text = f"""
üéØ **–û—Å–Ω–æ–≤–Ω–∞—è –º—ã—Å–ª—å:**
{analysis['main_idea']}

üí¨ **–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç:**
{analysis['answer']}
        """
        
        await message.answer(response_text)
        
    except sr.RequestError as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏.")
        logger.error(f"Speech recognition error: {e}")
    except Exception as e:
        error_msg = str(e)
        logger.error(f"Voice processing error: {e}")
        
        if "429" in error_msg or "rate" in error_msg.lower():
            mark_ai_error(user_id)
            await message.answer("‚ùå –õ–∏–º–∏—Ç—ã AI –∏—Å—á–µ—Ä–ø–∞–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 5-10 –º–∏–Ω—É—Ç.")
        elif "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç" in error_msg:
            mark_ai_error(user_id)
            await message.answer("‚ùå –°–µ—Ä–≤–∏—Å AI –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é –ª–æ–∫–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑.")
            try:
                backup_response = await simple_text_analysis(text)
                analysis = parse_analysis_response(backup_response)
                response_text = f"""
üéØ **–û—Å–Ω–æ–≤–Ω–∞—è –º—ã—Å–ª—å:**
{analysis['main_idea']}

üí¨ **–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç:**
{analysis['answer']}
                """
                await message.answer(response_text)
            except:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {error_msg}")
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        for filename in [ogg_filename, wav_filename]:
            if filename and os.path.exists(filename):
                try:
                    os.unlink(filename)
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {filename}: {e}")